//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.IO;
using System.Threading;
using System.Net.Sockets;
using System.Net;

namespace IntersectServer
{

	public class NetworkBase
	{
        TcpListener TCPServer;
		PacketHandler packetHandler = new PacketHandler ();

		public NetworkBase ()
		{
			 TCPServer = new TcpListener(IPAddress.Any,GlobalVariables.ServerPort);
             TCPServer.Start();
             TCPServer.BeginAcceptTcpClient(OnClientConnect, null);
		}

		private void OnClientConnect (IAsyncResult ar)
		{
            TcpClient client = TCPServer.EndAcceptTcpClient(ar);
            client.NoDelay = false;
            TCPServer.BeginAcceptTcpClient(OnClientConnect, null);
			int tempIndex = findOpenSocket ();
			int entityIndex;
			if (tempIndex > -1) {
				GlobalVariables.clients [tempIndex] = new Client (tempIndex, GlobalVariables.findOpenEntity (), client);
				entityIndex = GlobalVariables.clients [tempIndex].entityIndex;
                GlobalVariables.entities[entityIndex] = new Player(entityIndex, GlobalVariables.clients[tempIndex]);
				Console.WriteLine ("Client connected using client index of " + tempIndex);
			} else {
				Console.WriteLine ("Rejecting client due to lack of space.");
			}
		}

		public void runServer ()
		{
			for (int i = 0; i < GlobalVariables.clients.Count; i++) {
				if (GlobalVariables.clients [i] != null) {
					if (GlobalVariables.clients [i].isConnected) {
						//GlobalVariables.players [i].Update ();
					} else {
						//GlobalVariables.clientThread [i].Abort ();
						GlobalVariables.entities [GlobalVariables.clients [i].entityIndex] = null;
						GlobalVariables.clients [i] = null;
					}
				}
			}

			/*for (int i = 0; i < GlobalVariables.MaxPlayers; i++) {
					if (GlobalVariables.clients[i] != null) {
						if (GlobalVariables.clients[i].isConnected == true) {
							GlobalVariables.clients[i].Update (packetHandler);
						}
						else {
							GlobalVariables.clients[i] = null;
							Console.WriteLine ("Client Removed");
						}
					}
				}*/
				
		}

		int findOpenSocket ()
		{
			for (int i = 0; i < GlobalVariables.clients.Count; i++) {
				if (GlobalVariables.clients [i] == null) {
					//return i;
				} else if (i == GlobalVariables.clients.Count - 1) {
					GlobalVariables.clients.Add (null);
					GlobalVariables.clientThread.Add (null);
					return GlobalVariables.clients.Count - 1;
				}
			}
			GlobalVariables.clientThread.Add (null);
			GlobalVariables.clients.Add (null);
			return GlobalVariables.clients.Count - 1;
		}
	}
}

