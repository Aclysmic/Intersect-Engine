// <auto-generated />
using Intersect.Server.Classes.Database.GameData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Intersect.Server.Migrations.Game
{
    [DbContext(typeof(GameContext))]
    partial class GameContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Index");

                    b.Property<string>("JsonLowerLights")
                        .HasColumnName("Lower_Lights");

                    b.Property<string>("JsonUpperLights")
                        .HasColumnName("Upper_Lights");

                    b.Property<string>("Name");

                    b.Property<string>("Sound");

                    b.HasKey("Id");

                    b.ToTable("Animations");
                });

            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttackAnimation");

                    b.Property<long>("BaseExp");

                    b.Property<int>("BasePoints");

                    b.Property<int>("CritChance");

                    b.Property<int>("Damage");

                    b.Property<int>("DamageType");

                    b.Property<long>("ExpIncrease");

                    b.Property<int>("IncreasePercentage");

                    b.Property<int>("Index");

                    b.Property<string>("JsonBaseStats")
                        .HasColumnName("BaseStats");

                    b.Property<string>("JsonBaseVitals")
                        .HasColumnName("BaseVitals");

                    b.Property<string>("JsonItems")
                        .HasColumnName("Items");

                    b.Property<string>("JsonSpells")
                        .HasColumnName("Spells");

                    b.Property<string>("JsonSprites")
                        .HasColumnName("Sprites");

                    b.Property<bool>("Locked");

                    b.Property<string>("Name");

                    b.Property<int>("PointIncrease");

                    b.Property<string>("RegenJson")
                        .HasColumnName("VitalRegen");

                    b.Property<int>("Scaling");

                    b.Property<int>("ScalingStat");

                    b.Property<int>("SpawnDir");

                    b.Property<int>("SpawnMap");

                    b.Property<int>("SpawnX");

                    b.Property<int>("SpawnY");

                    b.Property<string>("StatIncreaseJson")
                        .HasColumnName("StatIncreases");

                    b.Property<string>("VitalIncreaseJson")
                        .HasColumnName("VitalIncreases");

                    b.HasKey("Id");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Index");

                    b.Property<string>("IngredientsJson")
                        .HasColumnName("Ingredients");

                    b.Property<int>("Item");

                    b.Property<string>("Name");

                    b.Property<int>("Time");

                    b.HasKey("Id");

                    b.ToTable("Crafts");
                });

            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CraftsJson")
                        .HasColumnName("Crafts");

                    b.Property<int>("Index");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CraftingTables");
                });

            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId")
                        .HasColumnName("Animation");

                    b.Property<int>("AttackAnimationId")
                        .HasColumnName("AttackAnimation");

                    b.Property<bool>("Bound");

                    b.Property<int>("CritChance");

                    b.Property<int>("Damage");

                    b.Property<int>("DamageType");

                    b.Property<int>("Data1");

                    b.Property<int>("Data2");

                    b.Property<int>("Data3");

                    b.Property<int>("Data4");

                    b.Property<string>("Desc");

                    b.Property<string>("FemalePaperdoll");

                    b.Property<int>("Index");

                    b.Property<int>("ItemType");

                    b.Property<string>("JsonUsageRequirements")
                        .HasColumnName("UsageRequirements");

                    b.Property<string>("MalePaperdoll");

                    b.Property<string>("Name");

                    b.Property<string>("Pic");

                    b.Property<int>("Price");

                    b.Property<int>("Projectile");

                    b.Property<int>("Scaling");

                    b.Property<int>("ScalingStat");

                    b.Property<int>("Speed");

                    b.Property<bool>("Stackable");

                    b.Property<int>("StatGrowth");

                    b.Property<string>("StatsJson")
                        .HasColumnName("StatsGiven");

                    b.Property<int>("Tool");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("AttackAllies");

                    b.Property<int>("AttackAnimationId")
                        .HasColumnName("AttackAnimation");

                    b.Property<byte>("Behavior");

                    b.Property<string>("CraftsJson")
                        .HasColumnName("Spells");

                    b.Property<int>("CritChance");

                    b.Property<int>("Damage");

                    b.Property<int>("DamageType");

                    b.Property<long>("Experience");

                    b.Property<int>("Index");

                    b.Property<string>("JsonAggroList")
                        .HasColumnName("AggroList");

                    b.Property<string>("JsonDrops")
                        .HasColumnName("Drops");

                    b.Property<string>("JsonMaxVital")
                        .HasColumnName("MaxVital");

                    b.Property<string>("JsonStat")
                        .HasColumnName("Stats");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<bool>("NpcVsNpcEnabled");

                    b.Property<int>("Scaling");

                    b.Property<int>("ScalingStat");

                    b.Property<int>("SightRange");

                    b.Property<int>("SpawnDuration");

                    b.Property<int>("SpellFrequency");

                    b.Property<string>("Sprite");

                    b.HasKey("Id");

                    b.ToTable("Npcs");
                });

            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmmoItemId")
                        .HasColumnName("Ammo");

                    b.Property<int>("AmmoRequired");

                    b.Property<string>("AnimationsJson")
                        .HasColumnName("Animations");

                    b.Property<int>("Delay");

                    b.Property<bool>("GrappleHook");

                    b.Property<bool>("Homing");

                    b.Property<bool>("IgnoreActiveResources");

                    b.Property<bool>("IgnoreExhaustedResources");

                    b.Property<bool>("IgnoreMapBlocks");

                    b.Property<bool>("IgnoreZDimension");

                    b.Property<int>("Index");

                    b.Property<int>("Knockback");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<int>("Range");

                    b.Property<string>("SpawnsJson")
                        .HasColumnName("SpawnLocations");

                    b.Property<int>("Speed");

                    b.Property<int>("SpellId")
                        .HasColumnName("Spell");

                    b.HasKey("Id");

                    b.ToTable("Projectiles");
                });

            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnimationId")
                        .HasColumnName("Animation");

                    b.Property<int>("Index");

                    b.Property<string>("JsonDrops")
                        .HasColumnName("Drops");

                    b.Property<string>("JsonHarvestingRequirements")
                        .HasColumnName("HarvestingRequirements");

                    b.Property<int>("MaxHp");

                    b.Property<int>("MinHp");

                    b.Property<string>("Name");

                    b.Property<int>("SpawnDuration");

                    b.Property<int>("Tool");

                    b.Property<bool>("WalkableAfter");

                    b.Property<bool>("WalkableBefore");

                    b.HasKey("Id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
                        {
                            b1.Property<Guid?>("AnimationBaseId");

                            b1.Property<bool>("DisableRotations");

                            b1.Property<int>("FrameCount");

                            b1.Property<int>("FrameSpeed");

                            b1.Property<int>("LoopCount");

                            b1.Property<string>("Sprite");

                            b1.Property<int>("XFrames");

                            b1.Property<int>("YFrames");

                            b1.ToTable("Animations");

                            b1.HasOne("Intersect.GameObjects.AnimationBase")
                                .WithOne("Lower")
                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
                        {
                            b1.Property<Guid>("AnimationBaseId");

                            b1.Property<bool>("DisableRotations");

                            b1.Property<int>("FrameCount");

                            b1.Property<int>("FrameSpeed");

                            b1.Property<int>("LoopCount");

                            b1.Property<string>("Sprite");

                            b1.Property<int>("XFrames");

                            b1.Property<int>("YFrames");

                            b1.ToTable("Animations");

                            b1.HasOne("Intersect.GameObjects.AnimationBase")
                                .WithOne("Upper")
                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
                {
                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
                        {
                            b1.Property<Guid?>("ResourceBaseId");

                            b1.Property<string>("Graphic");

                            b1.Property<bool>("GraphicFromTileset");

                            b1.Property<int>("Height");

                            b1.Property<int>("Width");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.ToTable("Resources");

                            b1.HasOne("Intersect.GameObjects.ResourceBase")
                                .WithOne("Exhausted")
                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
                        {
                            b1.Property<Guid>("ResourceBaseId");

                            b1.Property<string>("Graphic");

                            b1.Property<bool>("GraphicFromTileset");

                            b1.Property<int>("Height");

                            b1.Property<int>("Width");

                            b1.Property<int>("X");

                            b1.Property<int>("Y");

                            b1.ToTable("Resources");

                            b1.HasOne("Intersect.GameObjects.ResourceBase")
                                .WithOne("Initial")
                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
